>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry


A base class for geometry.

    Attributes:
        None

    Public Methods:
        area(self): Raises an Exception with the message 'area() is not implemented'.

        integer_validator(self, name, value): Validates an integer value.
            Raises a TypeError if value is not an integer with the message '<name> must be an integer'.
            Raises a ValueError if value is less than or equal to 0 with the message '<name> must be greater than 0'.

    Examples:
    >>> geometry = BaseGeometry()
    >>> geometry.area()
    Traceback (most recent call last):
      ...
    Exception: area() is not implemented

    >>> geometry.integer_validator("side_length", "abc")
    Traceback (most recent call last):
      ...
    TypeError: side_length must be an integer

    >>> geometry.integer_validator("side_length", 0)
    Traceback (most recent call last):
      ...
    ValueError: side_length must be greater than 0

    >>> geometry.integer_validator("side_length", 10)  # No exception is raised
    """
    def area(self):
        """Raises an Exception with the message 'area() is not implemented'."""
        raise Exception('area() is not implemented')

    def integer_validator(self, name, value):
        """
        Validates an integer value.

        Args:
            name (str): The name of the value.
            value (int): The value to be validated.

        Raises:
            TypeError: If the value is not an integer with the message '<name> must be an integer'.
            ValueError: If the value is less than or equal to 0 with the message '<name> must be greater than 0'.
        """
        if not isinstance(value, int):
            raise TypeError(f'{name} must be an integer')
        if value <= 0:
            raise ValueError(f'{name} must be greater than 0')
